# Try to determine what site/DC we are in based on the hostname
# This sucks and I dislike it greatly.
# - The Ginger

- name: Detect if the current ansible_fqdn var is good
  set_fact:
    found_good_hostname: "true"
    tm_hostname: "{{ ansible_fqdn }}"
  when: ansible_fqdn != "localhost.localdomain"

- name: Get hostname from /etc/hostname
  set_fact:
    tm_hostname: "{{ lookup('file', '/etc/hostname') }}"
  when: found_good_hostname is not defined

- name: Parse out site or dc name from hostname {{ tm_hostname }}
  shell: "echo {{ tm_hostname }} | perl -ple 's/.*\\.([a-z]{3}[0-9]*)\\.cloudsys.tmcs.*/$1/' "
  changed_when: false
  register: hostname_site

- name: We parsed site {{ hostname_site.stdout }} from hostname
  debug: var=hostname_site

- name: Set known good sites
  set_fact: valid_sites="['cap1', 'cap2', 'lab','dev1','phx1', 'phx2', 'ash1', 'ash2', 'lon1', 'ams1']"

- assert:
    that: hostname_site.stdout in valid_sites
    msg: "This is an invalid site. Valid sites are: {{ valid_sites }}"

- name: Detected we are in PHX Site
  set_fact:
    tm_site: "PHX"
  when: hostname_site.stdout in ['cap1','dev1','lab','phx1','phx2']

- name: Detected we are in ASH Site
  set_fact:
    tm_site: "ASH"
  when: hostname_site.stdout in ['cap2','ash1','ash2']

- name: Detected we are in LON1 Site
  set_fact:
    tm_site: "LON1"
  when: hostname_site.stdout in ['lon1']

- name: Detected we are in AMS1 Site
  set_fact:
    tm_site: "AMS1"
  when: hostname_site.stdout in ['ams1']

- name: Set TM Environment to PROD
  set_fact:
    tm_environment: "PROD"
  when: hostname_site.stdout not in ["dev1","lab"]

- name: Set TM Environment to NONPROD
  set_fact:
    tm_environment: "NONPROD"
  when: hostname_site.stdout in ["dev1","lab"]

- name: Site Detected {{ tm_site }}
  debug: var=tm_site

- name: TM Environment Detected {{ tm_environment }}
  debug: var=tm_environment
