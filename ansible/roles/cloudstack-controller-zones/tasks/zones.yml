# Create zone if doesnt exists
- local_action:
    module: cs_zone
    name: "{{ outer_item }}"
    dns1: 10.75.32.5
    dns2: 10.75.33.5
    internal_dns1: 10.75.32.5
    internal_dns2: 10.75.33.5
    network_type: advanced
    local_storage_enabled: true

# Lookup Zone ID
- local_action:
    module: cs_zone_facts
    name: "{{ outer_item }}"
  register: zone

# Detour to identify no physical networks defined
- name: List physical networks on the zone
  shell: cs listPhysicalNetworks zoneid="{{ zone.ansible_facts.cloudstack_zone.id }}"
  register: phys_net

# Create physical network if doesnt exist
- name: Create physical network on zones
  shell: cs createPhysicalNetwork zoneid="{{ zone.ansible_facts.cloudstack_zone.id }}" name=bond0 isolationmethods=vlan
  when: "{{ phys_net.stdout }} == {}"

# Get our PHY ID
- name: List physical networks on the zone
  shell: cs listPhysicalNetworks zoneid="{{ zone.ansible_facts.cloudstack_zone.id }}"
  register: new_net

- name: Parse results of new-net
  set_fact:
    net: "{{ new_net.stdout | from_json }}"

- name: Set ID from new-net
  set_fact:
    netid: "{{ net.physicalnetwork.0.id }}"

- fail:
    msg: "Could not identify Physical network ID"
  when: netid is not defined

- name: Set zone state
  set_fact:
    zone_state: "{{ zone.ansible_facts.cloudstack_zone.allocation_state }}"

# Create the 4 traffic types. Only if the zone is not enabled yet
- name: Create guest and public traffic types
  shell: cs addTrafficType physicalnetworkid="{{ netid }}" traffictype="{{ item }}" kvmnetworklabel=cloudbr
  when: zone_state == "Disabled"
  with_items:
    - "Guest"
    - "Public"

- name: Create managment and storage traffic types
  shell: cs addTrafficType physicalnetworkid="{{ netid }}" traffictype="{{ item }}" kvmnetworklabel=cloudbr0
  when: zone_state == "Disabled"
  with_items:
    - "Management"
    - "Storage"

- name: Enable Physical network
  shell: cs updatePhysicalNetwork id="{{ netid }}" state=Enabled
  when: zone_state == "Disabled"


# Include Zone var file based on region name
- name: include zones variables
  include_vars: roles/cloudstack-controller-zones/vars/{{ outer_item }}-zones.yml

- debug: msg="Adding public IP ranges to zone in {{ region }}"
- name: Add public IP range to zones
  shell: >
    cs createVlanIpRange physicalnetworkid="{{ netid }}"
    zoneid="{{ zone.ansible_facts.cloudstack_zone.id }}"
    startip="{{ item.value.pub_start_ip }}" endip="{{ item.value.pub_end_ip}}"
    vlan="{{ item.value.pub_vlan }}" gateway="{{ item.value.pub_gateway }}"
    netmask="{{ item.value.pub_netmask }}" forVirtualNetwork=true
  with_dict: "{{ zone_ranges }}"
